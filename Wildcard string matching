public class PatternMatching {

    public static boolean isMatch(int i, int j, String pattern, String text) {
        if (i < 0 && j < 0) return true;
        if (i < 0 && j >= 0) return false;
        if (j < 0 && i >= 0) {
            for (int ii = 0; ii <= i; ii++) {
                if (pattern.charAt(ii) != '*') return false;
            }
            return true;
        }

        if (pattern.charAt(i) == text.charAt(j) || pattern.charAt(i) == '?') {
            return isMatch(i - 1, j - 1, pattern, text);
        }

        if (pattern.charAt(i) == '*') {
            return isMatch(i - 1, j, pattern, text) || isMatch(i, j - 1, pattern, text);
        }

        return false;
    }

    public static void main(String[] args) {
        String pattern = "a*b?c";
        String text = "aabxc";
        int patternLength = pattern.length();
        int textLength = text.length();

        boolean result = isMatch(patternLength - 1, textLength - 1, pattern, text);
        System.out.println("Match result: " + result);
    }
}


class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        // DP table where dp[i][j] indicates whether s[0..i-1] matches p[0..j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];

        // Base case: both strings are empty
        dp[0][0] = true;

        // Fill the table for patterns with '*' matching empty strings
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2]; // '*' matches zero occurrences of the preceding character
            }
        }

        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char textChar = s.charAt(i - 1);
                char patternChar = p.charAt(j - 1);

                if (patternChar == '.' || patternChar == textChar) {
                    // Current characters match or '.' wildcard matches
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (patternChar == '*') {
                    // '*' can match zero occurrences of the preceding character
                    dp[i][j] = dp[i][j - 2];

                    // '*' can match one or more occurrences if the preceding character matches
                    char precedingChar = p.charAt(j - 2);
                    if (precedingChar == '.' || precedingChar == textChar) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            }
        }

        return dp[m][n];
    }
